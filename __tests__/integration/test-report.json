{
  "timestamp": "2025-09-12T11:42:32.627Z",
  "summary": {
    "total": 2,
    "passed": 0,
    "failed": 2,
    "successRate": 0
  },
  "details": [
    {
      "file": "sol-payment-flow.test.js",
      "passed": 0,
      "failed": 1,
      "total": 1,
      "status": "ERROR",
      "error": "Command failed: npx jest \"/home/groot/Code/solana/paymebro-xyz/server/__tests__/integration/sol-payment-flow.test.js\" --verbose --no-cache --forceExit\n\u001b[0m\u001b[7m\u001b[1m\u001b[31m FAIL \u001b[39m\u001b[22m\u001b[27m\u001b[0m \u001b[2m__tests__/integration/\u001b[22m\u001b[1msol-payment-flow.test.js\u001b[22m\n  SOL Payment Integration Tests\n    Complete SOL Payment Creation and Monitoring Cycle\n      \u001b[31m✕\u001b[39m \u001b[2mshould create SOL payment and monitor until confirmation (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payment with memo-based reference (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle versioned SOL transactions correctly\u001b[22m\n    SOL Payment Status Updates\n      \u001b[31m✕\u001b[39m \u001b[2mshould correctly update SOL payment status from pending to confirmed\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payment validation failures gracefully\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle network errors during SOL payment monitoring\u001b[22m\n    USDC Payment Regression Testing\n      \u001b[31m✕\u001b[39m \u001b[2mshould continue to process USDC payments correctly (regression test)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle mixed SOL and USDC payments in the same monitoring cycle\u001b[22m\n    Error Handling and Edge Cases\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle FindReferenceError for SOL payments\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with micro amounts and fee tolerance (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle transaction parsing errors gracefully\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should create SOL payment and monitor until confirmation\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should handle SOL payment with memo-based reference\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should handle versioned SOL transactions correctly\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should correctly update SOL payment status from pending to confirmed\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should handle SOL payment validation failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should handle network errors during SOL payment monitoring\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › USDC Payment Regression Testing › should continue to process USDC payments correctly (regression test)\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › USDC Payment Regression Testing › should handle mixed SOL and USDC payments in the same monitoring cycle\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle FindReferenceError for SOL payments\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle SOL payments with micro amounts and fee tolerance\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle transaction parsing errors gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1mTest Suites: \u001b[22m\u001b[1m\u001b[31m1 failed\u001b[39m\u001b[22m, 1 total\n\u001b[1mTests:       \u001b[22m\u001b[1m\u001b[31m11 failed\u001b[39m\u001b[22m, 11 total\n\u001b[1mSnapshots:   \u001b[22m0 total\n\u001b[1mTime:\u001b[22m        1.618 s\n\u001b[2mRan all test suites\u001b[22m\u001b[2m matching \u001b[22m/\\/home\\/groot\\/Code\\/solana\\/paymebro-xyz\\/server\\/__tests__\\/integration\\/sol-payment-flow.test.js/i\u001b[2m.\u001b[22m\n\u001b[1mForce exiting Jest: \u001b[22mHave you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "\u001b[0m\u001b[7m\u001b[1m\u001b[31m FAIL \u001b[39m\u001b[22m\u001b[27m\u001b[0m \u001b[2m__tests__/integration/\u001b[22m\u001b[1msol-payment-flow.test.js\u001b[22m\n  SOL Payment Integration Tests\n    Complete SOL Payment Creation and Monitoring Cycle\n      \u001b[31m✕\u001b[39m \u001b[2mshould create SOL payment and monitor until confirmation (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payment with memo-based reference (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle versioned SOL transactions correctly\u001b[22m\n    SOL Payment Status Updates\n      \u001b[31m✕\u001b[39m \u001b[2mshould correctly update SOL payment status from pending to confirmed\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payment validation failures gracefully\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle network errors during SOL payment monitoring\u001b[22m\n    USDC Payment Regression Testing\n      \u001b[31m✕\u001b[39m \u001b[2mshould continue to process USDC payments correctly (regression test)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle mixed SOL and USDC payments in the same monitoring cycle\u001b[22m\n    Error Handling and Edge Cases\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle FindReferenceError for SOL payments\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with micro amounts and fee tolerance (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle transaction parsing errors gracefully\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should create SOL payment and monitor until confirmation\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should handle SOL payment with memo-based reference\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Complete SOL Payment Creation and Monitoring Cycle › should handle versioned SOL transactions correctly\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should correctly update SOL payment status from pending to confirmed\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should handle SOL payment validation failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › SOL Payment Status Updates › should handle network errors during SOL payment monitoring\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › USDC Payment Regression Testing › should continue to process USDC payments correctly (regression test)\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › USDC Payment Regression Testing › should handle mixed SOL and USDC payments in the same monitoring cycle\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle FindReferenceError for SOL payments\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle SOL payments with micro amounts and fee tolerance\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mSOL Payment Integration Tests › Error Handling and Edge Cases › should handle transaction parsing errors gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 69 |\u001b[39m         }\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 71 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 72 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 73 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 74 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/sol-payment-flow.test.js\u001b[39m\u001b[0m\u001b[2m:71:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1mTest Suites: \u001b[22m\u001b[1m\u001b[31m1 failed\u001b[39m\u001b[22m, 1 total\n\u001b[1mTests:       \u001b[22m\u001b[1m\u001b[31m11 failed\u001b[39m\u001b[22m, 11 total\n\u001b[1mSnapshots:   \u001b[22m0 total\n\u001b[1mTime:\u001b[22m        1.618 s\n\u001b[2mRan all test suites\u001b[22m\u001b[2m matching \u001b[22m/\\/home\\/groot\\/Code\\/solana\\/paymebro-xyz\\/server\\/__tests__\\/integration\\/sol-payment-flow.test.js/i\u001b[2m.\u001b[22m\n\u001b[1mForce exiting Jest: \u001b[22mHave you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n"
    },
    {
      "file": "payment-monitoring-reliability.test.js",
      "passed": 0,
      "failed": 1,
      "total": 1,
      "status": "ERROR",
      "error": "Command failed: npx jest \"/home/groot/Code/solana/paymebro-xyz/server/__tests__/integration/payment-monitoring-reliability.test.js\" --verbose --no-cache --forceExit\n\u001b[0m\u001b[7m\u001b[1m\u001b[31m FAIL \u001b[39m\u001b[22m\u001b[27m\u001b[0m \u001b[2m__tests__/integration/\u001b[22m\u001b[1mpayment-monitoring-reliability.test.js\u001b[22m\n  Payment Monitoring Reliability Tests\n    Connection Management and Error Recovery\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle RPC connection failures gracefully (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould implement retry logic for transient RPC errors\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle Solana network congestion scenarios\u001b[22m\n    Payment Validation Edge Cases\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with complex fee structures\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with address lookup tables\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould validate reference inclusion in various transaction formats (1 ms)\u001b[22m\n    Performance and Scalability\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle large batches of pending payments efficiently\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould implement proper rate limiting for RPC calls\u001b[22m\n    Data Consistency and Recovery\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle database update failures gracefully\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould maintain payment state consistency during concurrent monitoring (1 ms)\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should handle RPC connection failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should implement retry logic for transient RPC errors\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should handle Solana network congestion scenarios\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should handle SOL payments with complex fee structures\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should handle SOL payments with address lookup tables\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should validate reference inclusion in various transaction formats\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Performance and Scalability › should handle large batches of pending payments efficiently\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Performance and Scalability › should implement proper rate limiting for RPC calls\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Data Consistency and Recovery › should handle database update failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Data Consistency and Recovery › should maintain payment state consistency during concurrent monitoring\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1mTest Suites: \u001b[22m\u001b[1m\u001b[31m1 failed\u001b[39m\u001b[22m, 1 total\n\u001b[1mTests:       \u001b[22m\u001b[1m\u001b[31m10 failed\u001b[39m\u001b[22m, 10 total\n\u001b[1mSnapshots:   \u001b[22m0 total\n\u001b[1mTime:\u001b[22m        1.391 s\n\u001b[2mRan all test suites\u001b[22m\u001b[2m matching \u001b[22m/\\/home\\/groot\\/Code\\/solana\\/paymebro-xyz\\/server\\/__tests__\\/integration\\/payment-monitoring-reliability.test.js/i\u001b[2m.\u001b[22m\n\u001b[1mForce exiting Jest: \u001b[22mHave you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n",
      "output": "\u001b[0m\u001b[7m\u001b[1m\u001b[31m FAIL \u001b[39m\u001b[22m\u001b[27m\u001b[0m \u001b[2m__tests__/integration/\u001b[22m\u001b[1mpayment-monitoring-reliability.test.js\u001b[22m\n  Payment Monitoring Reliability Tests\n    Connection Management and Error Recovery\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle RPC connection failures gracefully (1 ms)\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould implement retry logic for transient RPC errors\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle Solana network congestion scenarios\u001b[22m\n    Payment Validation Edge Cases\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with complex fee structures\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle SOL payments with address lookup tables\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould validate reference inclusion in various transaction formats (1 ms)\u001b[22m\n    Performance and Scalability\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle large batches of pending payments efficiently\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould implement proper rate limiting for RPC calls\u001b[22m\n    Data Consistency and Recovery\n      \u001b[31m✕\u001b[39m \u001b[2mshould handle database update failures gracefully\u001b[22m\n      \u001b[31m✕\u001b[39m \u001b[2mshould maintain payment state consistency during concurrent monitoring (1 ms)\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should handle RPC connection failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should implement retry logic for transient RPC errors\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Connection Management and Error Recovery › should handle Solana network congestion scenarios\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should handle SOL payments with complex fee structures\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should handle SOL payments with address lookup tables\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Payment Validation Edge Cases › should validate reference inclusion in various transaction formats\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Performance and Scalability › should handle large batches of pending payments efficiently\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Performance and Scalability › should implement proper rate limiting for RPC calls\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Data Consistency and Recovery › should handle database update failures gracefully\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPayment Monitoring Reliability Tests › Data Consistency and Recovery › should maintain payment state consistency during concurrent monitoring\u001b[39m\u001b[22m\n\n    Non-base58 character\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 19 |\u001b[39m     beforeAll(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m         testReferenceKeypair \u001b[33m=\u001b[39m \u001b[33mKeypair\u001b[39m\u001b[33m.\u001b[39mgenerate()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 21 |\u001b[39m         testMerchantWallet \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mPublicKey\u001b[39m(\u001b[32m'TestMerchantWallet111111111111111111111111'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m     beforeEach(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.decode (\u001b[22m\u001b[2mnode_modules/base-x/src/index.js\u001b[2m:115:11)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new decode (\u001b[22m\u001b[2mnode_modules/@solana/web3.js/src/publickey.ts\u001b[2m:63:30)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/integration/payment-monitoring-reliability.test.js\u001b[39m\u001b[0m\u001b[2m:21:30)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1mTest Suites: \u001b[22m\u001b[1m\u001b[31m1 failed\u001b[39m\u001b[22m, 1 total\n\u001b[1mTests:       \u001b[22m\u001b[1m\u001b[31m10 failed\u001b[39m\u001b[22m, 10 total\n\u001b[1mSnapshots:   \u001b[22m0 total\n\u001b[1mTime:\u001b[22m        1.391 s\n\u001b[2mRan all test suites\u001b[22m\u001b[2m matching \u001b[22m/\\/home\\/groot\\/Code\\/solana\\/paymebro-xyz\\/server\\/__tests__\\/integration\\/payment-monitoring-reliability.test.js/i\u001b[2m.\u001b[22m\n\u001b[1mForce exiting Jest: \u001b[22mHave you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n"
    }
  ]
}